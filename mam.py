import logging
import requests
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, CallbackQueryHandler, filters
from datetime import datetime
import sqlite3
import json
import uuid

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à)
TOKEN = "8235089289:AAFdXJwC8Inr9cFR3BrKjvVLSAmNjtOMmHc"
# –¢–æ–∫–µ–Ω CryptoBot (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à)
CRYPTOBOT_TOKEN = "452823:AAk7KK2bsZnOKRVaBqpTVbeNrlBPXJKQJHJ"

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
PRODUCTS_DB = {
    'split': {
        1: ("–Ø–Ω–¥–µ–∫—Å –°–ø–ª–∏—Ç - 30.000—Ä", 4),
        2: ("–Ø–Ω–¥–µ–∫—Å –°–ø–ª–∏—Ç - 50.000—Ä", 5),
        3: ("–Ø–Ω–¥–µ–∫—Å –°–ø–ª–∏—Ç - 60.000—Ä", 6),
        4: ("–Ø–Ω–¥–µ–∫—Å –°–ø–ª–∏—Ç - 70.000—Ä", 7),
        5: ("–Ø–Ω–¥–µ–∫—Å –°–ø–ª–∏—Ç - 100.000—Ä", 10),
        6: ("–Ø–Ω–¥–µ–∫—Å –°–ø–ª–∏—Ç - 75.000—Ä —É–ª—É—á—à–µ–Ω–Ω—ã–π", 15),
        7: ("–Ø–Ω–¥–µ–∫—Å –°–ø–ª–∏—Ç - 150.000—Ä —É–ª—É—á—à–µ–Ω–Ω—ã–π", 30),
        8: ("–Ø–Ω–¥–µ–∫—Å –°–ø–ª–∏—Ç - 200.000—Ä —É–ª—É—á—à–µ–Ω–Ω—ã–π", 40)
    },
    'manuals': {
        1: ("80–∫ —Ä –Ω–∞ —Å–µ—Ä–æ–º –∞—Ä–±–∏—Ç—Ä–∞–∂–µ —Ç—Ä–∞—Ñ–∏–∫–∞", 5),
        2: ("–õ–µ–≥–∫–∏–µ 100–∫ —Ä –≤ –º–µ—Å—è—Ü –Ω–∞ —Ç—Ä–∞—Ñ–∏–∫–µ", 6),
        3: ("300–∫ —Ä –≤ –º–µ—Å—è—Ü –Ω–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏", 7)
    },
    'abuse': {
        1: ("–ê–±—É–∑ –ø–∞—Ä—Ç–Ω–µ—Ä–∫–∏ –Ω–∞ –∑–≤–æ–Ω–∫–∞—Ö", 3),
        2: ("–ü–æ–∫—É–ø–∞–µ–º –ø–æ–¥—ã –∑–∞ 0—Ä", 6),
        3: ("–ê–±—É–∑ OZON - –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã", 9),
        4: ("18–∫ —Ä –∑–∞ –∫—Ä—É–≥ –Ω–∞ –ø—Ä–æ–º–æ—Ö–∞–Ω—Ç–∏–Ω–≥–µ", 6)
    },
    'business': {
        1: ("üî•–¢–û–üüî• OpenCase CSgo - –∏–≥—Ä–æ–≤–æ–µ –∫–∞–∑–∏–Ω–æ", 10),
        2: ("–¢–æ–ø dr@iner", 15),
        3: ("SMS BOT", 3),
        4: ("–ë–æ—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ —Å YouTube", 0.3)
    }
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('dark_shop.db')
    cursor = conn.cursor()
    
    # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        username TEXT,
        first_name TEXT,
        last_name TEXT,
        balance REAL DEFAULT 0,
        total_earned REAL DEFAULT 0,
        purchases_count INTEGER DEFAULT 0,
        referral_id INTEGER,
        registration_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–∫—É–ø–æ–∫
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS purchases (
        purchase_id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        product_name TEXT,
        price REAL,
        purchase_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        status TEXT DEFAULT 'completed'
    )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –ø–ª–∞—Ç–µ–∂–µ–π
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS payments (
        payment_id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        amount REAL,
        currency TEXT DEFAULT 'USD',
        cryptobot_invoice_id TEXT,
        status TEXT DEFAULT 'pending',
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
    ''')
    
    conn.commit()
    conn.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user(user_id, username, first_name, last_name):
    conn = sqlite3.connect('dark_shop.db')
    cursor = conn.cursor()
    
    cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
    user = cursor.fetchone()
    
    if not user:
        cursor.execute('''
        INSERT INTO users (user_id, username, first_name, last_name)
        VALUES (?, ?, ?, ?)
        ''', (user_id, username, first_name, last_name))
        conn.commit()
    
    conn.close()
    return user

# –ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_balance(user_id):
    conn = sqlite3.connect('dark_shop.db')
    cursor = conn.cursor()
    
    cursor.execute('SELECT balance FROM users WHERE user_id = ?', (user_id,))
    result = cursor.fetchone()
    conn.close()
    
    return result[0] if result else 0

# –°–ø–∏—Å–∞—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å –±–∞–ª–∞–Ω—Å–∞
def deduct_from_balance(user_id, amount):
    conn = sqlite3.connect('dark_shop.db')
    cursor = conn.cursor()
    
    cursor.execute('SELECT balance FROM users WHERE user_id = ?', (user_id,))
    current_balance = cursor.fetchone()[0]
    
    if current_balance >= amount:
        cursor.execute('UPDATE users SET balance = balance - ? WHERE user_id = ?', (amount, user_id))
        conn.commit()
        conn.close()
        return True
    else:
        conn.close()
        return False

# –î–æ–±–∞–≤–∏—Ç—å –ø–æ–∫—É–ø–∫—É
def add_purchase(user_id, product_name, price):
    conn = sqlite3.connect('dark_shop.db')
    cursor = conn.cursor()
    
    cursor.execute('''
    INSERT INTO purchases (user_id, product_name, price)
    VALUES (?, ?, ?)
    ''', (user_id, product_name, price))
    
    cursor.execute('UPDATE users SET purchases_count = purchases_count + 1 WHERE user_id = ?', (user_id,))
    conn.commit()
    conn.close()

# –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞ –≤ CryptoBot
async def create_cryptobot_invoice(user_id, amount):
    url = "https://pay.crypt.bot/api/createInvoice"
    
    headers = {
        "Crypto-Pay-API-Token": CRYPTOBOT_TOKEN,
        "Content-Type": "application/json"
    }
    
    payload = {
        "asset": "USDT",
        "amount": str(amount),
        "description": f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}",
        "hidden_message": f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ {amount}$",
        "paid_btn_name": "callback",
        "paid_btn_url": f"https://t.me/your_bot?start=payment_{user_id}",
        "payload": str(user_id),
        "allow_comments": False,
        "allow_anonymous": False
    }
    
    try:
        response = requests.post(url, headers=headers, json=payload)
        response_data = response.json()
        
        if response_data.get("ok"):
            return response_data["result"]
        else:
            print(f"–û—à–∏–±–∫–∞ CryptoBot: {response_data}")
            return None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–≤–æ–π—Å–∞: {e}")
        return None

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    get_user(user.id, user.username, user.first_name, user.last_name)
    
    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π - –ü–ï–†–í–ê–Ø –°–¢–†–û–ß–ö–ê: –ü—Ä–æ—Ñ–∏–ª—å, –¢–æ–≤–∞—Ä—ã; –í–¢–û–†–ê–Ø –°–¢–†–û–ß–ö–ê: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    keyboard = [
        [KeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å"), KeyboardButton("üõí –¢–æ–≤–∞—Ä—ã")],
        [KeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    welcome_text = (
        "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ DARK SHOP!\n\n"
        "‚ö° –¢–≤–æ–π –Ω–∞–¥–µ–∂–Ω—ã–π –ø–∞—Ä—Ç–Ω–µ—Ä –≤ –º–∏—Ä–µ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π\n"
        "üîí –ê–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å ‚Ä¢ –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å ‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ\n\n"
        "üëá –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –≤ –º–µ–Ω—é –Ω–∏–∂–µ:"
    )
    
    await update.message.reply_text(
        welcome_text,
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ—Ñ–∏–ª—å"
async def profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    conn = sqlite3.connect('dark_shop.db')
    cursor = conn.cursor()
    
    cursor.execute('''
    SELECT balance, purchases_count, total_earned, registration_date 
    FROM users WHERE user_id = ?
    ''', (user_id,))
    user_data = cursor.fetchone()
    conn.close()
    
    if user_data:
        balance, purchases_count, total_earned, reg_date = user_data
        
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è
        keyboard = [
            [InlineKeyboardButton("üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data='deposit')],
            [InlineKeyboardButton("üì¶ –ú–æ–∏ –ø–æ–∫—É–ø–∫–∏", callback_data='my_purchases')],
            [InlineKeyboardButton("üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞", callback_data='referral')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        profile_text = (
            "üë§ –í–ê–® –ü–†–û–§–ò–õ–¨\n\n"
            f"üÜî ID: <code>{user_id}</code>\n"
            f"üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {reg_date.split()[0]}\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å: <b>{balance}$</b>\n"
            f"üõí –ü–æ–∫—É–ø–æ–∫: <b>{purchases_count}</b>\n"
            f"üë• –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: <b>{total_earned}$</b>\n\n"
            "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–º"
        )
        
        await update.message.reply_text(
            profile_text,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–¢–æ–≤–∞—Ä—ã"
async def products(update: Update, context: ContextTypes.DEFAULT_TYPE):
    products_keyboard = [
        [InlineKeyboardButton("üîµ –Ø–Ω–¥–µ–∫—Å –°–ø–ª–∏—Ç", callback_data='category_split')],
        [InlineKeyboardButton("üìÑ –ú–∞–Ω—É–∞–ª—ã", callback_data='category_manuals')],
        [InlineKeyboardButton("‚ö° –ê–±—É–∑—ã", callback_data='category_abuse')],
        [InlineKeyboardButton("üöÄ –ì–æ—Ç–æ–≤—ã–π –±–∏–∑–Ω–µ—Å", callback_data='category_business')]
    ]
    reply_markup = InlineKeyboardMarkup(products_keyboard)
    
    products_text = (
        "üõí –ö–ê–¢–ê–õ–û–ì –¢–û–í–ê–†–û–í\n\n"
        "üéØ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:\n\n"
        "‚Ä¢ üîµ –Ø–Ω–¥–µ–∫—Å –°–ø–ª–∏—Ç - –ø—Ä–µ–º–∏—É–º –∞–∫–∫–∞—É–Ω—Ç—ã\n"
        "‚Ä¢ üìÑ –ú–∞–Ω—É–∞–ª—ã - –æ–±—É—á–∞—é—â–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã\n"
        "‚Ä¢ ‚ö° –ê–±—É–∑—ã - —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã\n"
        "‚Ä¢ üöÄ –ì–æ—Ç–æ–≤—ã–π –±–∏–∑–Ω–µ—Å - –≥–æ—Ç–æ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è\n\n"
        "üí° –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é"
    )
    
    await update.message.reply_text(
        products_text,
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
async def info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    info_text = (
        "‚ÑπÔ∏è –û DARK SHOP\n\n"
        "üñ§ –¢–í–û–ô –¢–ï–õ–ï–ì–†–ê–ú-–ß–ï–†–ù–´–ô –†–´–ù–û–ö –ë–ï–ó –ü–†–ê–í–ò–õ\n\n"
        "üéØ –ß–µ–º —Ç–æ—Ä–≥—É–µ–º?\n"
        "‚Ä¢ üîµ –Ø–Ω–¥–µ–∫—Å –°–ø–ª–∏—Ç - —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã\n"
        "‚Ä¢ üìÑ –ú–∞–Ω—É–∞–ª—ã - –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥–∏–∫–∏\n"
        "‚Ä¢ ‚ö° –ê–±—É–∑—ã - —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è\n"
        "‚Ä¢ üöÄ –ì–æ—Ç–æ–≤—ã–π –±–∏–∑–Ω–µ—Å - –≥–æ—Ç–æ–≤—ã–µ –ø—Ä–æ–µ–∫—Ç—ã\n\n"
        "üîí –ü–æ—á–µ–º—É –º—ã?\n"
        "‚Ä¢ üï∂Ô∏è –ü–æ–ª–Ω–∞—è –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å\n"
        "‚Ä¢ üí∞ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ (USDT, BTC, ETH)\n"
        "‚Ä¢ ‚ö° –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞\n"
        "‚Ä¢ üõ°Ô∏è –ì–∞—Ä–∞–Ω—Ç–∏—è –∫–∞—á–µ—Å—Ç–≤–∞\n\n"
        "ü§ù –ü–æ–¥–¥–µ—Ä–∂–∫–∞: @dark_shop_support_bot\n\n"
        "üí° –ú—ã —Ü–µ–Ω–∏–º –∫–∞–∂–¥–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞!"
    )
    
    await update.message.reply_text(info_text)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
async def handle_amount_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.strip()
    
    try:
        amount = float(text)
        if amount < 1:
            await update.message.reply_text(
                "‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è - 1$\n"
                "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –µ—â–µ —Ä–∞–∑:"
            )
            return
        
        if amount > 1000:
            await update.message.reply_text(
                "‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è - 1000$\n"
                "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –µ—â–µ —Ä–∞–∑:"
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å –≤ CryptoBot
        invoice = await create_cryptobot_invoice(user_id, amount)
        
        if invoice:
            payment_url = invoice["pay_url"]
            invoice_id = invoice["invoice_id"]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ –≤ –ë–î
            conn = sqlite3.connect('dark_shop.db')
            cursor = conn.cursor()
            cursor.execute('''
            INSERT INTO payments (user_id, amount, cryptobot_invoice_id)
            VALUES (?, ?, ?)
            ''', (user_id, amount, invoice_id))
            conn.commit()
            conn.close()
            
            payment_text = (
                f"üí≥ –û–ü–õ–ê–¢–ê {amount}$\n\n"
                f"üîó –°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n{payment_url}\n\n"
                "üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n"
                "1. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É –≤—ã—à–µ\n"
                "2. –û–ø–ª–∞—Ç–∏—Ç–µ —á–µ—Ä–µ–∑ CryptoBot\n"
                "3. –ë–∞–ª–∞–Ω—Å –∑–∞—á–∏—Å–ª–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n\n"
                "‚è±Ô∏è –û–±—ã—á–Ω–æ –∑–∞—á–∏—Å–ª–µ–Ω–∏–µ –∑–∞–Ω–∏–º–∞–µ—Ç 2-5 –º–∏–Ω—É—Ç\n"
                "üîÑ –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ\n\n"
                "‚ùì –ü—Ä–æ–±–ª–µ–º—ã? –ü–∏—à–∏—Ç–µ: @dark_shop_support_bot"
            )
            
            keyboard = [
                [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f'check_payment_{invoice_id}')],
                [InlineKeyboardButton("üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –µ—â–µ", callback_data='deposit')],
                [InlineKeyboardButton("üîô –í –ø—Ä–æ—Ñ–∏–ª—å", callback_data='back_to_profile')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                payment_text,
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
        else:
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @dark_shop_support_bot"
            )
            
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã\n"
            "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 10 –∏–ª–∏ 10.5):"
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫—É–ø–∫–∏ —Ç–æ–≤–∞—Ä–∞
async def handle_product_purchase(query, product_type, product_id, price, product_name):
    user_id = query.from_user.id
    user_balance = get_user_balance(user_id)
    
    if user_balance >= price:
        # –°–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤
        if deduct_from_balance(user_id, price):
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏
            add_purchase(user_id, product_name, price)
            
            purchase_text = (
                f"‚úÖ –ü–û–ö–£–ü–ö–ê –£–°–ü–ï–®–ù–ê!\n\n"
                f"üéÅ –¢–æ–≤–∞—Ä: {product_name}\n"
                f"üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: {price}$\n"
                f"üí∞ –û—Å—Ç–∞—Ç–æ–∫ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ: {user_balance - price}$\n\n"
                f"üì¶ –í–∞—à —Ç–æ–≤–∞—Ä:\n"
                f"–î–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç\n\n"
                f"‚ùì –í–æ–ø—Ä–æ—Å—ã? @dark_shop_support_bot"
            )
            
            await query.message.edit_text(
                purchase_text,
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üõí –ö —Ç–æ–≤–∞—Ä–∞–º", callback_data='back_to_products')],
                    [InlineKeyboardButton("üë§ –í –ø—Ä–æ—Ñ–∏–ª—å", callback_data='back_to_profile')]
                ])
            )
        else:
            await query.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–ø–∏—Å–∞–Ω–∏–∏ —Å—Ä–µ–¥—Å—Ç–≤\n"
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @dark_shop_support_bot",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f'category_{product_type}')]
                ])
            )
    else:
        await query.message.edit_text(
            f"‚ùå –ù–ï–î–û–°–¢–ê–¢–û–ß–ù–û –°–†–ï–î–°–¢–í\n\n"
            f"üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞: {price}$\n"
            f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {user_balance}$\n\n"
            f"–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data='deposit')],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f'category_{product_type}')]
            ])
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback queries
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    data = query.data
    
    if data == 'deposit':
        # –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —á–µ—Ä–µ–∑ CryptoBot
        user_id = query.from_user.id
        
        deposit_text = (
            "üí≥ –ü–û–ü–û–õ–ù–ï–ù–ò–ï –ë–ê–õ–ê–ù–°–ê\n\n"
            "üí∞ –í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é:\n"
            "‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 1$\n"
            "‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 1000$\n\n"
            "‚ö° –ë—ã—Å—Ç—Ä—ã–µ –∫–Ω–æ–ø–∫–∏:\n"
            "–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É –Ω—É–∂–Ω—É—é —Å—É–º–º—É"
        )
        
        deposit_keyboard = [
            [InlineKeyboardButton("5$", callback_data='deposit_5'),
             InlineKeyboardButton("10$", callback_data='deposit_10'),
             InlineKeyboardButton("20$", callback_data='deposit_20')],
            [InlineKeyboardButton("50$", callback_data='deposit_50'),
             InlineKeyboardButton("100$", callback_data='deposit_100'),
             InlineKeyboardButton("200$", callback_data='deposit_200')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_profile')]
        ]
        reply_markup = InlineKeyboardMarkup(deposit_keyboard)
        
        await query.message.edit_text(
            deposit_text,
            reply_markup=reply_markup
        )
    
    elif data.startswith('deposit_'):
        amount = float(data.split('_')[1])
        user_id = query.from_user.id
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å –≤ CryptoBot
        invoice = await create_cryptobot_invoice(user_id, amount)
        
        if invoice:
            payment_url = invoice["pay_url"]
            invoice_id = invoice["invoice_id"]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ –≤ –ë–î
            conn = sqlite3.connect('dark_shop.db')
            cursor = conn.cursor()
            cursor.execute('''
            INSERT INTO payments (user_id, amount, cryptobot_invoice_id)
            VALUES (?, ?, ?)
            ''', (user_id, amount, invoice_id))
            conn.commit()
            conn.close()
            
            payment_text = (
                f"üí≥ –û–ü–õ–ê–¢–ê {amount}$\n\n"
                f"üîó –°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n<code>{payment_url}</code>\n\n"
                "üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n"
                "1. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É –≤—ã—à–µ\n"
                "2. –û–ø–ª–∞—Ç–∏—Ç–µ —á–µ—Ä–µ–∑ CryptoBot\n"
                "3. –ë–∞–ª–∞–Ω—Å –∑–∞—á–∏—Å–ª–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n\n"
                "‚è±Ô∏è –û–±—ã—á–Ω–æ –∑–∞—á–∏—Å–ª–µ–Ω–∏–µ –∑–∞–Ω–∏–º–∞–µ—Ç 2-5 –º–∏–Ω—É—Ç\n"
                "üîÑ –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ\n\n"
                "‚ùì –ü—Ä–æ–±–ª–µ–º—ã? –ü–∏—à–∏—Ç–µ: @dark_shop_support_bot"
            )
            
            keyboard = [
                [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f'check_payment_{invoice_id}')],
                [InlineKeyboardButton("üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –µ—â–µ", callback_data='deposit')],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_profile')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.message.edit_text(
                payment_text,
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
        else:
            await query.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @dark_shop_support_bot",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='deposit')]
                ])
            )
    
    elif data == 'category_split':
        # –¢–æ–≤–∞—Ä—ã –Ø–Ω–¥–µ–∫—Å –°–ø–ª–∏—Ç
        split_keyboard = [
            [InlineKeyboardButton("–Ø–Ω–¥–µ–∫—Å –°–ø–ª–∏—Ç - 30.000—Ä (4$)", callback_data='buy_split_1')],
            [InlineKeyboardButton("–Ø–Ω–¥–µ–∫—Å –°–ø–ª–∏—Ç - 50.000—Ä (5$)", callback_data='buy_split_2')],
            [InlineKeyboardButton("–Ø–Ω–¥–µ–∫—Å –°–ø–ª–∏—Ç - 60.000—Ä (6$)", callback_data='buy_split_3')],
            [InlineKeyboardButton("–Ø–Ω–¥–µ–∫—Å –°–ø–ª–∏—Ç - 70.000—Ä (7$)", callback_data='buy_split_4')],
            [InlineKeyboardButton("–Ø–Ω–¥–µ–∫—Å –°–ø–ª–∏—Ç - 100.000—Ä (10$)", callback_data='buy_split_5')],
            [InlineKeyboardButton("–Ø–Ω–¥–µ–∫—Å –°–ø–ª–∏—Ç - 75.000—Ä —É–ª—É—á—à–µ–Ω–Ω—ã–π (15$)", callback_data='buy_split_6')],
            [InlineKeyboardButton("–Ø–Ω–¥–µ–∫—Å –°–ø–ª–∏—Ç - 150.000—Ä —É–ª—É—á—à–µ–Ω–Ω—ã–π (30$)", callback_data='buy_split_7')],
            [InlineKeyboardButton("–Ø–Ω–¥–µ–∫—Å –°–ø–ª–∏—Ç - 200.000—Ä —É–ª—É—á—à–µ–Ω–Ω—ã–π (40$)", callback_data='buy_split_8')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_products')]
        ]
        reply_markup = InlineKeyboardMarkup(split_keyboard)
        
        await query.message.edit_text(
            "üîµ –Ø–Ω–¥–µ–∫—Å –°–ø–ª–∏—Ç - –∞–∫–∫–∞—É–Ω—Ç—ã\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –ø–æ–∫—É–ø–∫–∏:",
            reply_markup=reply_markup
        )
    
    elif data == 'category_manuals':
        # –ú–∞–Ω—É–∞–ª—ã
        manuals_keyboard = [
            [InlineKeyboardButton("80–∫ —Ä –Ω–∞ —Å–µ—Ä–æ–º –∞—Ä–±–∏—Ç—Ä–∞–∂–µ —Ç—Ä–∞—Ñ–∏–∫–∞ (5$)", callback_data='buy_manuals_1')],
            [InlineKeyboardButton("–õ–µ–≥–∫–∏–µ 100–∫ —Ä –≤ –º–µ—Å—è—Ü –Ω–∞ —Ç—Ä–∞—Ñ–∏–∫–µ (6$)", callback_data='buy_manuals_2')],
            [InlineKeyboardButton("300–∫ —Ä –≤ –º–µ—Å—è—Ü –Ω–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ (7$)", callback_data='buy_manuals_3')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_products')]
        ]
        reply_markup = InlineKeyboardMarkup(manuals_keyboard)
        
        await query.message.edit_text(
            "üìÑ –ú–∞–Ω—É–∞–ª—ã - –æ–±—É—á–∞—é—â–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–Ω—É–∞–ª –¥–ª—è –ø–æ–∫—É–ø–∫–∏:",
            reply_markup=reply_markup
        )
    
    elif data == 'category_abuse':
        # –ê–±—É–∑—ã
        abuse_keyboard = [
            [InlineKeyboardButton("–ê–±—É–∑ –ø–∞—Ä—Ç–Ω–µ—Ä–∫–∏ –Ω–∞ –∑–≤–æ–Ω–∫–∞—Ö (3$)", callback_data='buy_abuse_1')],
            [InlineKeyboardButton("–ü–æ–∫—É–ø–∞–µ–º –ø–æ–¥—ã –∑–∞ 0—Ä (6$)", callback_data='buy_abuse_2')],
            [InlineKeyboardButton("–ê–±—É–∑ OZON - –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã (9$)", callback_data='buy_abuse_3')],
            [InlineKeyboardButton("18–∫ —Ä –∑–∞ –∫—Ä—É–≥ –Ω–∞ –ø—Ä–æ–º–æ—Ö–∞–Ω—Ç–∏–Ω–≥–µ (6$)", callback_data='buy_abuse_4')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_products')]
        ]
        reply_markup = InlineKeyboardMarkup(abuse_keyboard)
        
        await query.message.edit_text(
            "‚ö° –ê–±—É–∑—ã - —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∞–±—É–∑ –¥–ª—è –ø–æ–∫—É–ø–∫–∏:",
            reply_markup=reply_markup
        )
    
    elif data == 'category_business':
        # –ì–æ—Ç–æ–≤—ã–π –±–∏–∑–Ω–µ—Å
        business_keyboard = [
            [InlineKeyboardButton("üî•–¢–û–üüî• OpenCase CSgo - –∏–≥—Ä–æ–≤–æ–µ –∫–∞–∑–∏–Ω–æ (10$)", callback_data='buy_business_1')],
            [InlineKeyboardButton("–¢–æ–ø dr@iner (15$)", callback_data='buy_business_2')],
            [InlineKeyboardButton("SMS BOT (3$)", callback_data='buy_business_3')],
            [InlineKeyboardButton("–ë–æ—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ —Å YouTube (0.3$)", callback_data='buy_business_4')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_products')]
        ]
        reply_markup = InlineKeyboardMarkup(business_keyboard)
        
        await query.message.edit_text(
            "üöÄ –ì–æ—Ç–æ–≤—ã–π –±–∏–∑–Ω–µ—Å - –≥–æ—Ç–æ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –ø–æ–∫—É–ø–∫–∏:",
            reply_markup=reply_markup
        )
    
    elif data.startswith('buy_'):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ —Ç–æ–≤–∞—Ä–∞
        parts = data.split('_')
        if len(parts) == 3:
            product_type = parts[1]
            product_id = int(parts[2])
            
            if product_type in PRODUCTS_DB and product_id in PRODUCTS_DB[product_type]:
                product_name, price = PRODUCTS_DB[product_type][product_id]
                await handle_product_purchase(query, product_type, product_id, price, product_name)
    
    elif data == 'back_to_products':
        # –í–æ–∑–≤—Ä–∞—Ç –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —Ç–æ–≤–∞—Ä–æ–≤
        products_keyboard = [
            [InlineKeyboardButton("üîµ –Ø–Ω–¥–µ–∫—Å –°–ø–ª–∏—Ç", callback_data='category_split')],
            [InlineKeyboardButton("üìÑ –ú–∞–Ω—É–∞–ª—ã", callback_data='category_manuals')],
            [InlineKeyboardButton("‚ö° –ê–±—É–∑—ã", callback_data='category_abuse')],
            [InlineKeyboardButton("üöÄ –ì–æ—Ç–æ–≤—ã–π –±–∏–∑–Ω–µ—Å", callback_data='category_business')]
        ]
        reply_markup = InlineKeyboardMarkup(products_keyboard)
        
        await query.message.edit_text(
            "üõí –ö–ê–¢–ê–õ–û–ì –¢–û–í–ê–†–û–í\n\n"
            "üéØ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=reply_markup
        )
    
    elif data == 'back_to_profile':
        # –í–æ–∑–≤—Ä–∞—Ç –∫ –ø—Ä–æ—Ñ–∏–ª—é
        user_id = query.from_user.id
        conn = sqlite3.connect('dark_shop.db')
        cursor = conn.cursor()
        
        cursor.execute('''
        SELECT balance, purchases_count, total_earned, registration_date 
        FROM users WHERE user_id = ?
        ''', (user_id,))
        user_data = cursor.fetchone()
        conn.close()
        
        if user_data:
            balance, purchases_count, total_earned, reg_date = user_data
            
            keyboard = [
                [InlineKeyboardButton("üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data='deposit')],
                [InlineKeyboardButton("üì¶ –ú–æ–∏ –ø–æ–∫—É–ø–∫–∏", callback_data='my_purchases')],
                [InlineKeyboardButton("üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞", callback_data='referral')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            profile_text = (
                "üë§ –í–ê–® –ü–†–û–§–ò–õ–¨\n\n"
                f"üÜî ID: <code>{user_id}</code>\n"
                f"üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {reg_date.split()[0]}\n"
                f"üí∞ –ë–∞–ª–∞–Ω—Å: <b>{balance}$</b>\n"
                f"üõí –ü–æ–∫—É–ø–æ–∫: <b>{purchases_count}</b>\n"
                f"üë• –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: <b>{total_earned}$</b>"
            )
            
            await query.message.edit_text(profile_text, reply_markup=reply_markup, parse_mode='HTML')
    
    elif data == 'my_purchases':
        user_id = query.from_user.id
        conn = sqlite3.connect('dark_shop.db')
        cursor = conn.cursor()
        
        cursor.execute('SELECT product_name, price, purchase_date FROM purchases WHERE user_id = ?', (user_id,))
        purchases = cursor.fetchall()
        conn.close()
        
        if purchases:
            purchases_text = "üì¶ –í–∞—à–∏ –ø–æ–∫—É–ø–∫–∏:\n\n"
            for purchase in purchases:
                purchases_text += f"üõí {purchase[0]} - {purchase[1]}$ ({purchase[2]})\n"
        else:
            purchases_text = "–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –ø–æ–∫—É–ø–æ–∫."
        
        await query.message.reply_text(purchases_text)
    
    elif data == 'referral':
        user_id = query.from_user.id
        referral_link = f"https://t.me/your_bot?start=ref_{user_id}"
        
        await query.message.reply_text(
            f"üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞\n\n"
            f"–ü—Ä–∏–≤–æ–¥–∏ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π 30% –æ—Ç –∏—Ö –ø–æ–∫—É–ø–æ–∫!\n\n"
            f"–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n{referral_link}\n\n"
            f"–í–∞—à ID –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {user_id}"
        )

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    init_db()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ Application
    application = Application.builder().token(TOKEN).build()
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.Text(["üë§ –ü—Ä–æ—Ñ–∏–ª—å"]), profile))
    application.add_handler(MessageHandler(filters.Text(["üõí –¢–æ–≤–∞—Ä—ã"]), products))
    application.add_handler(MessageHandler(filters.Text(["‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"]), info))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_amount_input))
    application.add_handler(CallbackQueryHandler(button_handler))
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    print("üí° –û–∂–∏–¥–∞—é —Å–æ–æ–±—â–µ–Ω–∏—è...")
    application.run_polling()

if __name__ == '__main__':
    main()